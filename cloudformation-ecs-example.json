{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "ECS Cluster CloudFormation Template",
  
  "Parameters" : {
    
    "VPCSubnets" : {
      "Description" : "Subnets to launch EC2 & ELB instances in",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },
    
    "EC2SecurityGroup" : {
      "Description" : "Security Group for EC2 instances",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    
    "ELBSecurityGroup" : {
      "Description" : "Security Group for ELB",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    
    "KeyName" : {
      "Description" : "SSH Key Pair Name",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    
    "EC2InstanceType" : {
      "Description" : "EC2 Instance Type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : ["t2.micro", "t2.small", "t2.medium", "t2.large"]
    }
    
  },
  
  "Mappings" : {
    "RegionAMIMap" : {
      "us-east-1"      : { "AMI" : "ami-8fcee4e5" },
      "us-west-2"      : { "AMI" : "ami-63b25203" },
      "us-west-1"      : { "AMI" : "ami-d1f482b1" },
      "eu-west-1"      : { "AMI" : "ami-e1398992" },
      "eu-central-1"   : { "AMI" : "ami-d22932be" },
      "ap-southeast-1" : { "AMI" : "ami-0103cd62" },
      "ap-northeast-2" : { "AMI" : "ami-4d1fd123" },
      "ap-northeast-1" : { "AMI" : "ami-59bdb937" },
      "ap-southeast-2" : { "AMI" : "ami-11032472" },
      "sa-east-1"      : { "AMI" : "ami-f0f4779c" }
    }
  }, 
  
  "Resources" : {
    
    "EC2IAMRole" : {
      "Type": "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        
        "Path" : "/",
        
        "Policies" : [ {
          "PolicyName" : "ControllerPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [
              {
                "Effect":"Allow",
                "Action":[
                  "ecs:CreateCluster",
                  "ecs:DeregisterContainerInstance",
                  "ecs:DiscoverPollEndpoint",
                  "ecs:Poll",
                  "ecs:RegisterContainerInstance",
                  "ecs:StartTelemetrySession",
                  "ecs:DescribeServices",
                  "ecs:UpdateService",
                  "ecs:Submit*",
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage"
                ],
                "Resource":"*"
              },
              {
                "Effect":"Deny",
                "Action":"iam:*",
                "Resource":"*"
              }
            ]
          }
        }]
      }
    },
    
    "EC2InstProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "EC2IAMRole" } ]
      }
    },
    
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "ecs-init" : [],
                "haproxy" : []
              }
            },
            "services" : {
              "sysvinit" : {
                "docker" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                },
                "haproxy" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            },
            "files" : {
              "/etc/sysconfig/docker" : {
                "content" : { "Fn::Join" : ["", [
                  "DAEMON_MAXFILES=1048576\n",
                  "OPTIONS=\"-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock --default-ulimit nofile=1024:4096\"\n",
                  "DOCKER_CERT_PATH=/etc/docker"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
                
              },
              "/usr/local/bin/docker_proxy.py" : {
                "source" : "https://raw.githubusercontent.com/vinayselvaraj/docker-haproxy-cfg-generator/master/docker_proxy.py",
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/usr/local/bin/generate-haproxy-cfg.sh" : {
                "source" : "https://raw.githubusercontent.com/vinayselvaraj/docker-haproxy-cfg-generator/master/generate-haproxy-cfg.sh",
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/haproxy/haproxy.cfg.template" : {
                "source" : "https://raw.githubusercontent.com/vinayselvaraj/docker-haproxy-cfg-generator/master/haproxy.cfg.template",
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cron.d/generate_haproxy_cfg.cron" : {
                "content" : { "Fn::Join" : ["", [
                  "SHELL=/bin/bash\n",
                  "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin\n",
                  "HOME=/\n",
                  "* * * * * root sleep `/usr/bin/expr $RANDOM \\% 59`; /usr/local/bin/generate-haproxy-cfg.sh >& /dev/null\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/ecs/ecs.config" : {
                "content" : { "Fn::Join" : ["", [
                  "ECS_CLUSTER=", { "Ref": "ECSCluster" }, "\n",
                  "ECS_RESERVED_MEMORY=256"
                ]]}
              }
            },
            "commands" : {
              "01_installPythonDeps" : {
                "command" : "pip install docker-py "
              },
              "02_startDocker" : {
                "command" : "/sbin/service docker start"
              },
              "03_pauseForDockerToStart" : {
                "command" : "until [[ $(/sbin/service docker status) =~ running ]]; do sleep 1; done"
              },
              "04_startECSAgent" : {
                "command" : "start ecs"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress" : "true",
        "IamInstanceProfile" : { "Ref" : "EC2InstProfile" },
        "ImageId" : {
          "Fn::FindInMap" : [
            "RegionAMIMap",
            { "Ref" : "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "SecurityGroups" : [ { "Ref" : "EC2SecurityGroup" } ],
        "UserData"        : {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/bin/cfn-init --region ", 
                  { "Ref": "AWS::Region"}, 
                  " -s ", { "Ref" : "AWS::StackName" }, 
                  " -r LaunchConfig"
              ]
            ]
          }
        }
      }
    },
    
    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "VPCZoneIdentifier" : { "Ref" : "VPCSubnets" },
        "MinSize" : "1",
        "MaxSize" : "10",
        "LoadBalancerNames" : [ { "Ref" : "Elb8000" } ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch" : "true" }
        ]
      }
    },
    
    "AlarmTopic" : {
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "Subscription" : [
          {
            "Protocol" : "sqs",
            "Endpoint" : { "Fn::GetAtt" : ["AlarmQueue", "Arn"] }
          }
        ]
      }
    },
    
    "AlarmQueue" : {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "VisibilityTimeout" : "60"
      }
    },
    
    "AlarmQueuePolicy" : {
      "Type":"AWS::SQS::QueuePolicy",
      "Properties" : {
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Id" : "MyQueuePolicy",
          "Statement" : [
            {
              "Sid" : "Allow-SendMessage-To-Queue-From-SNS-Topic",
    	        "Effect" : "Allow",           
    	        "Principal" : "*",
     	        "Action" : ["sqs:SendMessage"],
    	        "Resource" : "*",
              "Condition" : {
                "ArnEquals" : {
                  "aws:SourceArn" : {"Ref":"AlarmTopic"}
                }
              }
            }
          ]
        },
        "Queues":[{"Ref":"AlarmQueue"}]
      }
    },
    
    "ScalingConfigTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "ProvisionedThroughput" : {
          "ReadCapacityUnits"  : "1",
          "WriteCapacityUnits" : "1"
        },
        "AttributeDefinitions" : [
          {
            "AttributeName" : "AlarmId",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "AlarmId",
            "KeyType" : "HASH"
          }
        ]
      }
    },
    
    "ECSScalingServiceTaskDef" : {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name" : { "Fn::Join" : ["", [
              { "Ref" : "AWS::StackName" }, "-ecs-scaling"
            ]]},
          
            "Image":"vinayselvaraj/ecs-task-scaling-service:latest",
            "Cpu": "10",
            "Memory": "128",
            "Environment" : [
              {
                "Name": "SQS_QUEUE",
                "Value": { "Ref" : "AlarmQueue" }
              },
              {
                "Name": "DDB_TABLE",
                "Value": { "Ref" : "ScalingConfigTable" }
              },
              {
                "Name": "ECS_CLUSTER",
                "Value": { "Ref" : "ECSCluster" }
              },
              {
                "Name": "AWS_REGION",
                "Value": { "Ref" : "AWS::Region" }
              }
            ],
            "Essential": "true"
          }
        ]
      }
    },
    
    "ECSScalingServiceService" : {
      "Type" : "AWS::ECS::Service",
      "Properties" : {
        "Cluster" : { "Ref" : "ECSCluster" },
        "DesiredCount" : "1",
        "TaskDefinition" : {"Ref" : "ECSScalingServiceTaskDef"}
      }
    },
    
    "Elb8000" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Listeners": [
          {
            "LoadBalancerPort" : "80",
            "InstancePort": "8000",
            "Protocol": "TCP"
          }
        ],
        
        "Subnets": { "Ref" : "VPCSubnets" },
        
        "HealthCheck": {
          "Target": "HTTP:8000/",
          "HealthyThreshold": "3",
          "Interval": "5",
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        
        "ConnectionDrainingPolicy": {
          "Enabled" : "true",
          "Timeout" : "60"
        },
        
        "CrossZone": "true"
      }
    },
    
    "ECSCluster" : {
      "Type" : "AWS::ECS::Cluster"
    }
    
  },
  
  "Outputs" : {
    "AlarmTopicArn" : {
      "Description" : "SNS Topic for CloudWatch alarms",
      "Value" : { "Ref" : "AlarmTopic" }
    },
    "ECSClusterName" : {
      "Description" : "ECS Cluster Name",
      "Value" : { "Ref" : "ECSCluster" }
    }
  }
  
}
