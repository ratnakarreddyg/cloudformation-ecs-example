{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "httpd ECS service",
  
  "Parameters" : {
    "ECSClusterStackName" : {
      "Description" : "CloudFormation Stack Name that has the ECS cluster",
      "Type" : "String"
    },
    "CPUHighThreshold" : {
      "Description" : "Hich CPU Treshold in %",
      "Type" : "Number",
      "Default" : "80"
    },
    "CPULowThreshold" : {
      "Description" : "Low CPU Treshold in %",
      "Type" : "Number",
      "Default" : "10"
    },
    "MaxTasks" : {
      "Description" : "Maximum number of ECS Tasks for the service",
      "Type" : "Number",
      "Default" : "20"
    },
    "MinTasks" : {
      "Description" : "Minimum number of ECS Tasks for the service",
      "Type" : "Number",
      "Default" : "2"
    },
    "ScaleUpPercent" : {
      "Description" : "Percent to scale up by",
      "Type" : "Number",
      "Default" : "20"
    },
    "ScaleDownPercent" : {
      "Description" : "Percent to scale down by (USE NEGATIVE NUMBER)",
      "Type" : "Number",
      "Default" : "-10"
    },
    "ScalingCooldown" : {
      "Description" : "Number of seconds after a scaling activity is completed before any further scaling event can start",
      "Type" : "Number",
      "Default" : "60"
    }
  },
  
  "Resources" : {
    
    "ecsTask" : {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name" : { "Fn::Join" : ["", [
              { "Ref" : "AWS::StackName" }, "-httpdTask"
            ]]},
            
            "Image":"httpd:latest",
            "Cpu": "10",
            "Memory": "128",
            "PortMappings": [
              {
                "ContainerPort": "80"
              }
            ],
            "Environment" : [
              {
                "Name": "docker-proxy-container-port",
                "Value": "80"
              },
              {
                "Name": "docker-proxy-external-port",
                "Value": "8000"
              }
            ],
            "Essential": "true"
          }
        ]
      }
    },
    
    "ecsService" : {
      "Type" : "AWS::ECS::Service",
      "Properties" : {
        "Cluster" : { "Fn::GetAtt": [ "LookupStackOutputCustom", "ECSClusterName" ] },
        "DesiredCount" : "1",
        "TaskDefinition" : {"Ref" : "ecsTask"}
      }
    },
    
    "cpuHighAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "Namespace" : "AWS/ECS",
        "MetricName" : "CPUUtilization",
        "AlarmDescription" : { "Fn::Join": ["", [
          { "Fn::GetAtt" : ["GetECSServiceNameFromArnCustom", "ServiceName"] }, ",",
          { "Ref" : "MinTasks" }, ",",
          { "Ref" : "MaxTasks" }, ",",
          { "Ref" : "ScalingCooldown" }, ",",
          { "Ref" : "ScaleUpPercent" }
        ]]},
        "Dimensions" : [
          {
            "Name" : "ClusterName",
            "Value" : { "Fn::GetAtt": [ "LookupStackOutputCustom", "ECSClusterName" ] }
          },
          {
            "Name" : "ServiceName",
            "Value" : { "Fn::GetAtt" : ["GetECSServiceNameFromArnCustom", "ServiceName"] }
            
          }
        ],
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "3",
        "Threshold" : { "Ref" : "CPUHighThreshold" },
        "ComparisonOperator": "GreaterThanThreshold",
        "AlarmActions" : [
          { "Fn::GetAtt": [ "LookupStackOutputCustom", "AlarmTopicArn" ] }
        ]
      }
    },
    
    "cpuLowAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "Namespace" : "AWS/ECS",
        "MetricName" : "CPUUtilization",
        "AlarmDescription" : { "Fn::Join": ["", [
          { "Fn::GetAtt" : ["GetECSServiceNameFromArnCustom", "ServiceName"] }, ",",
          { "Ref" : "MinTasks" }, ",",
          { "Ref" : "MaxTasks" }, ",",
          { "Ref" : "ScalingCooldown" }, ",",
          { "Ref" : "ScaleDownPercent" }
        ]]},
        "Dimensions" : [
          {
            "Name" : "ClusterName",
            "Value" : { "Fn::GetAtt": [ "LookupStackOutputCustom", "ECSClusterName" ] }
          },
          {
            "Name" : "ServiceName",
            "Value" : { "Fn::GetAtt" : ["GetECSServiceNameFromArnCustom", "ServiceName"] }
            
          }
        ],
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "3",
        "Threshold" : { "Ref" : "CPULowThreshold" },
        "ComparisonOperator": "LessThanThreshold",
        "AlarmActions" : [
          { "Fn::GetAtt": [ "LookupStackOutputCustom", "AlarmTopicArn" ] }
        ]
      }
    },
    
    "LookupStackOutputCustom": {
      "Type": "Custom::NetworkInfo",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["LookupStackOutputs", "Arn"] },
        "StackName": {
          "Ref": "ECSClusterStackName"
        }
      }
    },
    
    "LookupStackOutputsLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": ["cloudformation:DescribeStacks"],
              "Resource": "*"
            }]
          }
        }]
      }
    },
    
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var response = require('cfn-response');",
            "exports.handler = function(event, context) {",
            "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
            "    if (event.RequestType == 'Delete') {",
            "        response.send(event, context, response.SUCCESS);",
            "        return;",
            "    }",
            "    var stackName = event.ResourceProperties.StackName;",
            "    var responseData = {};",
            "    if (stackName) {",
            "        var aws = require('aws-sdk');",
            "        var cfn = new aws.CloudFormation();",
            "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
            "            if (err) {",
            "                responseData = {Error: 'DescribeStacks call failed'};",
            "                console.log(responseData.Error + ':\\n', err);",
            "                response.send(event, context, response.FAILED, responseData);",
            "            }",
            "            else {",
            "                data.Stacks[0].Outputs.forEach(function(output) {",
            "                    responseData[output.OutputKey] = output.OutputValue;",
            "                });",
            "                response.send(event, context, response.SUCCESS, responseData);",
            "            }",
            "        });",
            "    } else {",
            "        responseData = {Error: 'Stack name not specified'};",
            "        console.log(responseData.Error);",
            "        response.send(event, context, response.FAILED, responseData);",
            "    }",
            "};"
          ]]}
        },
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30",
        "Role": { "Fn::GetAtt" : ["LookupStackOutputsLambdaExecutionRole", "Arn"] }
      }
    },
    
    "GetECSServiceNameFromArnFunctionRole" : {
      "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }]
          },
          "Path": "/",
          "Policies": [{
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": "arn:aws:logs:*:*:*"
              }]
            }
          }]
        }
    },
    
    "GetECSServiceNameFromArnFunction" : {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var response = require('cfn-response');\n",
            "var aws = require('aws-sdk');\n",
            "var lambda = new aws.Lambda();\n",
            "exports.handler = function(event, context) {\n",
            "    if (event.RequestType == 'Delete') {\n",
            "        response.send(event, context, response.SUCCESS);\n",
            "        return;\n",
            "    }\n",
            "    var stringToParse = event.ResourceProperties.StringToParse;\n",
            "    if (stringToParse) {\n",
            "        var responseData = {};\n",
            "        responseData.Splits = stringToParse.split('/');\n",
            "        responseData.Beginning = responseData.Splits.slice(0, responseData.Splits.length - 1).join('/');\n",
            "        responseData.ServiceName = responseData.Splits.slice(responseData.Splits.length - 1)[0];\n",
            "        console.log(responseData);\n",
            "        response.send(event, context, response.SUCCESS, responseData);\n",
            "    } else {\n",
            "        var responseData = {Error: 'String no specified'};\n",
            "        console.log(responseData.Error);\n",
            "        response.send(event, context, response.FAILED, responseData);\n",
            "    };\n",
            "};\n"
          ]]}
        },
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30",
        "Role": { "Fn::GetAtt" : ["GetECSServiceNameFromArnFunctionRole", "Arn"] }
      }
    },
    
    "GetECSServiceNameFromArnCustom" : {
      "Type": "Custom::ECSServiceNameFromArn",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["GetECSServiceNameFromArnFunction", "Arn"] },
        "StringToParse": { "Ref" : "ecsService" }
      }
    }
    
  }
  
}